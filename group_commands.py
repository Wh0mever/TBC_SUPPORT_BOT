from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types.input_file import FSInputFile
from datetime import datetime, timedelta
import os

from database import is_ceo, is_admin
from analytics import AnalyticsManager

router = Router()
analytics_manager = AnalyticsManager()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ADMIN_COMMANDS = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç–∞–º
/my_stats - –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/open_tickets - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CEO:
/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
/export_day - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
/export_week - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
/export_month - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü
"""

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if not await is_admin(message.from_user.id):
        return
    
    await message.answer(ADMIN_COMMANDS)

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not await is_admin(message.from_user.id):
        return
    
    stats = await analytics_manager.get_tickets_stats('day')
    sla = await analytics_manager.get_sla_metrics()
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    text += f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total']}\n\n"
    text += "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
    for status, count in stats['statuses'].items():
        text += f"‚Ä¢ {status}: {count}\n"
    
    text += f"\nSLA –º–µ—Ç—Ä–∏–∫–∏:\n"
    text += f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ –≤–æ–≤—Ä–µ–º—è: {sla['on_time_percent']}%\n"
    text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {sla['missed_percent']}%"
    
    await message.answer(text)

@router.message(Command("my_stats"))
async def cmd_my_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await is_admin(message.from_user.id):
        return
    
    admin_stats = await analytics_manager.get_admin_stats(message.from_user.id)
    missed_stats = await analytics_manager.get_missed_responses_stats(message.from_user.id)
    
    if admin_stats:
        stats = admin_stats[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        text += f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total_tickets']}\n"
        text += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time'] // 60} –º–∏–Ω—É—Ç\n"
        text += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['missed']}\n"
        if missed_stats:
            text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤: {missed_stats[0]['missed_percent']:.1f}%"
        
        await message.answer(text)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command("admin_stats"))
async def cmd_admin_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è CEO)"""
    if not await is_ceo(message.from_user.id):
        return
    
    admin_stats = await analytics_manager.get_admin_stats()
    
    text = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for stats in admin_stats:
        text += f"–ê–¥–º–∏–Ω @{stats['username']}:\n"
        text += f"‚Ä¢ –¢–∏–∫–µ—Ç–æ–≤: {stats['total_tickets']}\n"
        avg_time = stats.get('avg_response_time', 0)
        if avg_time is not None:
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {int(avg_time) // 60} –º–∏–Ω—É—Ç\n"
        else:
            text += "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['missed']}\n\n"
    
    await message.answer(text)

@router.message(Command("open_tickets"))
async def cmd_open_tickets(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    if not await is_admin(message.from_user.id):
        return
    
    from database import get_open_tickets
    tickets = await get_open_tickets()
    
    if not tickets:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
        return
    
    text = "üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
    for ticket in tickets:
        text += f"–¢–∏–∫–µ—Ç #{ticket['id']}\n"
        text += f"–û—Ç: {ticket['user_name']}\n"
        text += f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n"
        text += "-------------------\n"
    
    await message.answer(text)

@router.message(Command(commands=["export_day", "export_week", "export_month"]))
async def cmd_export(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è CEO)"""
    if not await is_ceo(message.from_user.id):
        return
    
    period = message.text.split('_')[1]  # day, week –∏–ª–∏ month
    filename = await analytics_manager.export_to_csv(period)
    
    with open(filename, 'rb') as file:
        await message.answer_document(
            document=FSInputFile(filename),
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period}"
        )
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)

def register_group_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    dp.include_router(router)
