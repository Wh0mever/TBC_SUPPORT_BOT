import os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import (
    is_admin, is_ceo, add_admin, get_all_admins,
    get_admin_tickets, get_open_tickets, get_closed_tickets
)
from analytics import AnalyticsManager
from keyboards import get_admin_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminManagement(StatesGroup):
    waiting_for_admin_id = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_manager = AnalyticsManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    is_ceo_user = await is_ceo(message.from_user.id)
    keyboard = get_admin_keyboard(is_ceo=is_ceo_user)
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤
@router.callback_query(lambda c: c.data in ['my_tickets', 'open_tickets', 'closed_tickets'])
async def process_tickets_view(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    if callback.data == 'my_tickets':
        tickets = await get_admin_tickets(callback.from_user.id)
        title = "–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã"
    elif callback.data == 'open_tickets':
        tickets = await get_open_tickets()
        title = "–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"
    else:
        tickets = await get_closed_tickets()
        title = "–ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"

    if not tickets:
        await callback.message.answer(f"{title}: –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤")
        return

    for ticket in tickets:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                        callback_data=f"reply:{ticket['id']}"
                    ),
                    InlineKeyboardButton(
                        text="–ó–∞–∫—Ä—ã—Ç—å",
                        callback_data=f"close:{ticket['id']}"
                    )
                ]
            ]
        )
        
        text = (
            f"–¢–∏–∫–µ—Ç #{ticket['id']}\n"
            f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket['priority']}\n"
            f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n"
            f"–û—Ç: {ticket['user_name']}"
        )
        
        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@router.callback_query(lambda c: c.data == 'analytics')
async def process_analytics(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await analytics_manager.get_tickets_stats('day')
    admin_stats = await analytics_manager.get_admin_stats(
        callback.from_user.id if not await is_ceo(callback.from_user.id) else None
    )
    sla = await analytics_manager.get_sla_metrics()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    text = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n"
    text += f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: {stats['total']}\n"
    text += "\n–°—Ç–∞—Ç—É—Å—ã —Ç–∏–∫–µ—Ç–æ–≤:\n"
    for status, count in stats['statuses'].items():
        text += f"- {status}: {count}\n"
    
    text += "\nSLA –º–µ—Ç—Ä–∏–∫–∏:\n"
    text += f"–ó–∞–∫—Ä—ã—Ç–æ –≤–æ–≤—Ä–µ–º—è: {sla['on_time_percent']}%\n"
    text += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {sla['missed_percent']}%\n"

    if await is_ceo(callback.from_user.id):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è CEO
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–≠–∫—Å–ø–æ—Ä—Ç (–¥–µ–Ω—å)",
                        callback_data="export:day"
                    ),
                    InlineKeyboardButton(
                        text="–≠–∫—Å–ø–æ—Ä—Ç (–Ω–µ–¥–µ–ª—è)",
                        callback_data="export:week"
                    ),
                    InlineKeyboardButton(
                        text="–≠–∫—Å–ø–æ—Ä—Ç (–º–µ—Å—è—Ü)",
                        callback_data="export:month"
                    )
                ]
            ]
        )
    else:
        keyboard = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    chart = await analytics_manager.generate_hourly_chart()
    await callback.message.answer_photo(
        photo=chart,
        caption=text,
        reply_markup=keyboard
    )

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(lambda c: c.data.startswith('export:'))
async def process_export(callback: CallbackQuery):
    if not await is_ceo(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ CEO")
        return

    period = callback.data.split(':')[1]
    filename = await analytics_manager.export_to_csv(period)
    
    with open(filename, 'rb') as file:
        await callback.message.answer_document(
            document=file,
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period}"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è CEO)
@router.callback_query(lambda c: c.data == 'manage_admins')
async def process_manage_admins(callback: CallbackQuery, state: FSMContext):
    if not await is_ceo(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ CEO")
        return

    admins = await get_all_admins()
    
    text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin in admins:
        text += f"- @{admin['username']} ({admin['role']})\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                    callback_data="add_admin"
                )
            ]
        ]
    )
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(lambda c: c.data == 'add_admin')
async def process_add_admin(callback: CallbackQuery, state: FSMContext):
    if not await is_ceo(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ CEO")
        return

    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    await state.set_state(AdminManagement.waiting_for_admin_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.message(AdminManagement.waiting_for_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    if not await is_ceo(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ CEO")
        return

    try:
        admin_id = int(message.text)
        success = await add_admin(admin_id, "admin")
        
        if success:
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

def register_admin_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    dp.include_router(router)
